#+TITLE: My Config
#+PROPERTY: header-args :tangle config.el
#+STARTUP: overview

#+begin_src elisp :tangle packages.el
;; Fix transient bug
(package! transient :pin "c2bdf7e12c530eb85476d3aef317eb2941ab9440")
(package! with-editor :pin "391e76a256aeec6b9e4cbd733088f30c677d965b")
#+end_src
* to be done
** TODO [#A] Adicionar linhas após o fim do dia na org-agenda
** TODO [[https://github.com/yantar92/org-capture-ref][GitHub - yantar92/org-capture-ref: Extract metadata/bibtex info from websites...]]
** TODO [[https://github.com/cpitclaudel/biblio.el][GitHub - cpitclaudel/biblio.el: Browse and import bibliographic references fr...]]
** TODO Rearranjar o org-super-agenda
*** [ ] Fazer uma subseção com as coisas comcluídas hoje.
** TODO minted src blocks on latex export
** TODO Use =org-special-blocks-extra= [[https://alhassy.github.io/org-special-block-extras/#Equational-Proofs][fonte]]
Algo parecido com:
#+begin_theorem [Nome do teorema]
Teorema com [nome do teorema na frente] e com o nome do teorema, no latex, em verde, que nem o #+title
#+end_theorem
** TODO Permitir que o spell check cheque para pt e en ao mesmo tempo

** TODO org-reveal
https://www.youtube.com/watch?v=avtiR0AUVlo
** TODO Forge
https://magit.vc/manual/forge/
** TODO LSP consume muita bateria, talvez TRAMP?
** TODO Quando eu digitar $, automaticamente colocar $$ e o cursor no meio.
** TODO Proselint
[[https://github.com/amperser/proselint][GitHub - amperser/proselint: A linter for prose.]]
Pode ser instalado com ~pip install proselint~ e o flycheck irá automaticamente usá-lo
** TODO [[https://github.com/xenodium/company-org-block][xenodium/company-org-block]]
** TODO [[https://github.com/natrys/whisper.el][GitHub - natrys/whisper.el: Speech-to-Text interface for Emacs using OpenAI's...]]
** TODO [[https://github.com/magnars/expand-region.el][GitHub - magnars/expand-region.el: Emacs extension to increase selected regio...]]
** TODO Minimap of context overview
Seria interessante ter um minimapa contextual. Num arquivo de c, mostrar as funções/classes/variáveis (como o treemacs faz), num arquivo org, mostrar as headlines etc...
[[https://github.com/knupfer/org-panes/blob/master/org-panes.el][org-panes/org-panes.el at master · knupfer/org-panes · GitHub]]
** TODO word-counter-goal
Algo que permita contar a quantidade de palavras adicionadas/removidas num conjunto de arquivos e marcar, na modeline, a sua meta de palavras.
[[https://github.com/bnbeckwith/wc-goal-mode][GitHub - bnbeckwith/wc-goal-mode: Emacs mode to achieve word-count goals]]

** TODO Remove property from deft search
Most of what is shown in deft is just de properties from a file.
** TODO [[https://github.com/jkitchin/scimax/blob/master/scimax.org][scimax/scimax.org at master · jkitchin/scimax · GitHub]]
** TODO [[https://github.com/emacs-tw/awesome-emacs][GitHub - emacs-tw/awesome-emacs: A community driven list of useful Emacs pack...]]
** TODO [[https://karl-voit.at/2020/08/14/project-mgt-draft/][A Draft Workflow for Advanced Project Management Using Org Mode and Org Edna]]
** TODO [[https://tony-zorman.com/posts/2022-10-22-emacs-potpourri.html][A Potpourri of Emacs Tweaks – Tony Zorman]]
** TODO [[https://github.com/doomemacs/doomemacs/issues/4413][doomemacs/doomemacs#4413 Module for nano-emacs]]
** TODO [[https://www.reddit.com/r/emacs/comments/zkb7aq/contextaware_yasnippets_via_treesitter/][Context-aware yasnippets (via tree-sitter) : emacs]]
** TODO https://orgmode.org/worg/exporters/anno-bib-template-worg.html
** TODO expandir sse para "se, e somente se, "

[[file:~/org/roam/references/Malaguti2010SurveyVertexColoring.org::*Branch and price][Branch and price]]
** TODO https://github.com/howardabrams/hamacs
** TODO https://github.com/mickeynp/combobulate
** TODO https://www.reddit.com/r/emacs/comments/10rsxty/treesitauto_03_now_with_automatic_installation_of/
** TODO https://github.com/fbkarsdorp/org-agenda-dashboard
** KILL [[https://github.com/bastibe/org-journal][org-journal]]
CLOSED: [2022-11-17 qui 16:27]

#+begin_src elisp :tangle no
(setq org-journal-file-type 'weekly ;; a file represents a week
      org-journal-dir "~/org/journal/"
      org-journal-file-format "%Y %V - %m %d.org" ;; must contain %Y %m %d when using 'weekly
      org-extend-today-until 3
      )

(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  (unless (eq org-journal-file-type 'daily)
    (org-narrow-to-subtree))
  (goto-char (point-max)))

(after! org
  (map-put! org-capture-templates "j" '("Journal" plain (function org-journal-find-location)
                                        "** %(format-time-string org-journal-time-format)%^{Title}\n%?"
                                        :jump-to-captured t :immediate-finish t)))
#+end_src

** TODO https://github.com/Fuco1/dired-hacks/blob/master/dired-subtree.el
** scimax
Documentation: scimax.org

Packages that may be of some interest:
- org-db.el :: sql database for org-mode files
  - org-db-fulltext.el
  - org-db-images.el

- scimax-ob.el :: src edit inspired by jupiter notebook
  - scimax-ob-flycheck.org

- scimax-org.el :: org-use-speed-commands, org-image-actual-width
  - scimax-org-attachments.el
  - scimax-org-babel-python.el
  - scimax-org-images.el
  - scimax-org-latex.el
  - scimax-org-src-blocks.el
  - scimax-org-table.el

- scimax-yas.el :: snippets
  - snippets

- scimax.el :: general scimax configuration
- scimax-autoformat-abbrev.el :: abreviations and auto expansions
- scimax-build.el :: build org file based on src named "build"
- scimax-editmarks.org :: [[https://github.com/CriticMarkup/CriticMarkup-toolkit][CriticMarkup]]
- scimax-functional-text.el :: links to email, hashtags, usernames, commits, pr...
- scimax-@-links.el :: @ to insert links to convenient things
- scimax-link-thumbnails.el :: TODO
- scimax-literate-programming.el ::  TODO
- scimax-lob.el :: [[https://git.sr.ht/~bzg/worg/tree/master/item/library-of-babel.org][library-of-babel.org]]
  - scimax-lob

scimax-notebook.org
subfiles
help-fns+.el
words.el
* General
#+BEGIN_SRC elisp
(setq user-full-name "Ieremies Vieira da Fonseca Romero"
      user-mail-address "ieremies@gmail.com"
      doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 14)
      ;; doom-variable-pitch-font (font-spec :family "Segoe UI Variable Static Text")
      doom-theme 'doom-nano-light
      evil-want-fine-undo t
      ;; performance
      inhibit-compacting-font-caches t
      display-line-numbers-type nil
      frame-title-format "%f - Emacs"
      )
#+end_src

** Center search result
#+begin_src elisp
(advice-add 'evil-ex-search-next :after
            (lambda (&rest x) (evil-scroll-line-to-center (line-number-at-pos))))
(advice-add 'evil-ex-search-previous :after
            (lambda (&rest x) (evil-scroll-line-to-center (line-number-at-pos))))
#+end_src

#+RESULTS:

* App
** calendar
#+begin_src elisp
(after! calf-org
(setq cfw:org-overwrite-default-keybinding t
      calendar-holidays '((holiday-fixed 1 1   "Ano novo")
                          (holiday-fixed 4 21  "Tiradentes")
                          (holiday-fixed 5 1   "Dia do trabalhador")
                          (holiday-float 5 0 2 "Dia das mães")
                          (holiday-fixed 7 9   "Revolução constitucionalista")
                          (holiday-float 8 0 2 "Dia dos pais")
                          (holiday-fixed 9 7   "Independência")
                          (holiday-fixed 10 12 "Dia das crianças")
                          (holiday-fixed 10 28 "Dia do servidor público")
                          (holiday-fixed 11 2  "Finados")
                          (holiday-fixed 11 15 "Proclamação da república")
                          (holiday-fixed 12 8  "Aniversário de Campinas")
                          (holiday-fixed 12 25 "Natal")
                          (holiday-easter-etc 0   "Pascoa")
                          (holiday-easter-etc -2  "Sexta-feira santa")
                          (holiday-easter-etc -46 "Quarta-feira de cinzas")
                          (holiday-easter-etc -47 "Carnaval")
                          (holiday-easter-etc -48 "Carnaval")
                          (holiday-easter-etc 50  "Corpus-christi"))
      ))
#+end_src

* Checkers
** syntax
** spell
#+begin_src elisp :tangle no
(after! flyspell
  (setq flyspell-lazy-idle-seconds 2))

(with-eval-after-load "ispell"
  ;; Configure `LANG`, otherwise ispell.el cannot find a 'default
  ;; dictionary' even though multiple dictionaries will be configured
  ;; in next line.
  (setenv "LANG" "en_US.UTF-8")
  (setq ispell-program-name "hunspell")
  ;; Configure German, Swiss German, and two variants of English.
  (setq ispell-dictionary "pt_BR,en_US")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "pt_BR,en_US")
  ;; For saving words to the personal dictionary, don't infer it from
  ;; the locale, otherwise it would save to ~/.hunspell_de_DE.
  (setq ispell-personal-dictionary "~/.hunspell_personal"))

;; The personal dictionary file has to exist, otherwise hunspell will
;; silently not use it.
(unless (file-exists-p ispell-personal-dictionary)
  (write-region "" nil ispell-personal-dictionary nil 0))
#+end_src

** grammar
Pode ser instalado com ~pacman -S languagetool~
#+begin_src elisp :tangle packages.el
(package! languagetool
  :recipe (:host github :repo "PillFall/languagetool.el"))
#+end_src
#+begin_src elisp
;; source : doom's grammar module
(use-package! languagetool
  :commands (langtool-check
             langtool-check-done
             langtool-show-message-at-point
             langtool-correct-buffer)
  :config
    (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8"
                                    "-cp" "/usr/share/languagetool:/usr/share/java/languagetool/*")
      languagetool-console-command "org.languagetool.commandline.Main"
      languagetool-server-command "org.languagetool.server.HTTPServer"))
#+end_src

* Completion
** Company
#+begin_src elisp
(after! company
  (setq company-idle-delay 0.5
        company-box-scrollbar nil))
#+end_src

** Vertico
Remove hiden files (dot files) from search.
#+begin_src elisp
;; add to $DOOMDIR/config.el, thank @henrik
(defadvice! ignore-dot-prefix-in-file-completion-table (fun str pred flag)
  "Call `completion-file-name-table' with a predicate that
ignores matches starting with a dot, unless STR starts with a
dot."
  :around #'completion-file-name-table
  (funcall fun str
           (cond ((string-prefix-p "." (file-name-nondirectory str))
                  pred)
                 ((not pred)
                  (lambda (str)
                    (not (string-prefix-p "." str))))
                 ((lambda (str)
                    (and (not (string-prefix-p "." str))
                         (funcall pred str)))))
           flag))

#+end_src

* emacs
** Dired
#+begin_src elisp
(after! (:and dired evil-collection)
  ;; allow for some movimentation in files like ranger
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file)
  (setq delete-by-moving-to-trash t
        ;; when u have 2 dired buffers, assume the other is the target
        dired-dwin-target t)
  ;; always hide details
  (add-hook 'dired-mode-hook
      (lambda ()
        (dired-hide-details-mode)))
  )
#+end_src
* org
** General config
#+begin_src elisp
(after! org
  (setq org-directory "~/org/"
        org-export-with-todo-keywords 'nil ; remove todo keywords from exports
        org-log-done 'time ; log when a task was closed
        org-archive-location ".%s_archive::"
        org-blank-before-new-entry '((heading . t) (plain-list-item . auto))
        org-export-default-language "pt"
        )

  (map! :leader :desc "Paste org subtree" "m s p"#'org-paste-subtree
                :desc "Yank org subtree"  "m s y"#'org-copy-subtree
                ;; switching capture with scratch
                :desc "Org capture"    "x"#'org-capture
                :desc "Scratch buffer" "X"#'doom/open-scratch-buffer)
  )
#+end_src

** Smart quotes
Está faltando a configuração para pt-br.
#+begin_src elisp :results silent
(after! ox
(add-to-list 'org-export-smart-quotes-alist
 '("pt"
  (primary-opening :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``")
  (primary-closing :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''")
  (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`")
  (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'")
  (apostrophe :utf-8 "’" :html "&rsquo;"))
 ))
#+end_src

** Latex export
#+begin_src elisp
(after! org
  (setq org-highlight-latex-and-related '(native script entities)))
#+end_src

All exports places under a folder called build
#+begin_src elisp
(defadvice org-export-output-file-name (before org-add-export-dir activate)
  "Modifies org-export to place exported files in a different directory"
  (when (not pub-dir)
      (setq pub-dir "build")
      (when (not (file-directory-p pub-dir))
       (make-directory pub-dir))))
#+end_src

#+RESULTS:
: org-export-output-file-name

*** org-fragtog
Allows latex fragments to be automatically previewed.
#+BEGIN_SRC elisp :tangle packages.el
(package! org-fragtog)
#+END_SRC
#+BEGIN_SRC elisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+END_SRC
*** Centering latex preview fragments
Code extracted from [[https://github.com/jkitchin/scimax][scimax]] to center latex previews.
Also, check out [[https://kitchingroup.cheme.cmu.edu/blog/category/orgmode/4/][eq]] to fix equation numbers.

#+begin_src elisp :tangle packages.el
(package! ov
  :recipe (:host github :repo "emacsorphanage/ov"))
#+end_src
#+begin_src elisp
(use-package ov)
(after! org
(plist-put org-format-latex-options :justify 'center))
;; * Fragment justification
(defun scimax-org-latex-fragment-justify (justification)
  "Justify the latex fragment at point with JUSTIFICATION.
JUSTIFICATION is a symbol for 'left, 'center or 'right."
  (interactive
   (list (intern-soft
          (completing-read "Justification (left): " '(left center right)
                           nil t nil nil 'left))))
  (let* ((ov (ov-at))
    (beg (ov-beg ov))
    (end (ov-end ov))
    (shift (- beg (line-beginning-position)))
    (img (overlay-get ov 'display))
    (img (and (and img (consp img) (eq (car img) 'image)
         (image-type-available-p (plist-get (cdr img) :type)))
         img))
    space-left offset)
    (when (and img
          ;; This means the equation is at the start of the line
          (= beg (line-beginning-position))
          (or
           (string= "" (s-trim (buffer-substring end (line-end-position))))
           (eq 'latex-environment (car (org-element-context)))))
      (setq space-left (- (window-max-chars-per-line) (car (image-size img)))
            offset (floor (cond
                           ((eq justification 'center)
                            (- (/ space-left 2) shift))
                           ((eq justification 'right)
                            (- space-left shift))
                           (t
                            0))))
      (when (>= offset 0)
        (overlay-put ov 'before-string (make-string offset ?\ ))))))

(defun scimax-org-latex-fragment-justify-advice (beg end image imagetype)
  "After advice function to justify fragments."
  (scimax-org-latex-fragment-justify (or (plist-get org-format-latex-options :justify) 'left)))

(defun scimax-toggle-latex-fragment-justification ()
  "Toggle if LaTeX fragment justification options can be used."
  (interactive)
  (if (not (get 'scimax-org-latex-fragment-justify-advice 'enabled))
        (progn
          (advice-add 'org--make-preview-overlay :after 'scimax-org-latex-fragment-justify-advice)
          (put 'scimax-org-latex-fragment-justify-advice 'enabled t)
          (message "Latex fragment justification enabled"))
        (advice-remove 'org--make-preview-overlay 'scimax-org-latex-fragment-justify-advice)
        (put 'scimax-org-latex-fragment-justify-advice 'enabled nil)
        (message "Latex fragment justification disabled")))

(scimax-toggle-latex-fragment-justification)
#+end_src
*** Default preamble
#+begin_src elisp
(after! org
  (add-to-list 'org-latex-packages-alist '("" "amsthm" t))
  (add-to-list 'org-latex-packages-alist '("AUTO" "babel" t))
  (add-to-list 'org-latex-packages-alist '("" "todonotes" t))  )
#+end_src

** Agenda
#+begin_src elisp
(after! org-agenda
  (setq org-agenda-restore-windows-after-quit t

        ;; show only two windows, the current and org-agenda
        org-agenda-window-setup 'reorganize-frame

        ;; I want it to be from the last sunday to the next wednesday (+11d)
        org-agenda-span 'day
        org-agenda-start-day nil
        ;; org-agenda-start-on-weekday 0

        ;; It will only show a warning of a deadline if it is between scheduled and deadline
        org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled

        ;; I think this one refers to continue to show scheduled after deadline has passed
        org-agenda-skip-scheduled-delay-if-deadline 'post-deadline

        org-agenda-start-with-log-mode t
        org-agenda-log-mode-items '(clock)
        org-agenda-weekend-days '(6)
        org-agenda-columns-add-appointments-to-effort-sum  t
        org-enforce-todo-dependencies nil
        org-agenda-block-separator ""
        )
  ;; Workaround to add all .org file to agenda
  (load-library "find-lisp")
  (setq org-agenda-files (append (find-lisp-find-files "~/org" "\.org$")
                                 (find-lisp-find-files "~/proj" "\.org$")))
  )
#+end_src
*** [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]]
#+begin_src elisp :tangle packages.el
(package! org-super-agenda)
#+end_src
#+begin_src elisp
(use-package org-super-agenda
  :after org-agenda
  :init
  (setq date-plus-30 (org-read-date nil nil "+30")
        org-super-agenda-groups `((:discard (:deadline (after, date-plus-30)))
                                  (:name "Late!"
                                         :scheduled past
                                         :deadline past)
                                  (:name "Today"
                                         :time-grid t
                                         :deadline today
                                         :scheduled today)
                                  (:name "Comming up..."
                                         :auto-category t
                                         )))
  (org-super-agenda-mode))
#+end_src

*** [[github:alphapapa/org-ql][org-ql]]
#+begin_src elisp :tangle packages.el
(package! org-ql)
#+end_src

Esse comando serve para complementar a minha agenda.
Nele, eu quero a agenda do dia e, embaixo, uma lista das tarefas futuras que não possuem scheduled
#+begin_src elisp
(after! org-agenda
  (setq date-plus-15 (org-read-date nil nil "+15")
        org-agenda-custom-commands
        '(("h" "Daily view"
           ((agenda)
            (org-ql-block '(and (todo "TODO")
                                (not (scheduled))
                                (not (deadline))
                                (not (descendants (todo "TODO")))
                                )
                          ((org-ql-block-header "Backlog")))
            ))
          )
        )

  (defun my-agenda-command ()
    "Abre a custon view diária da agenda"
    (interactive)
    (org-agenda nil "h"))

  (map! (:map org-mode-map
         :leader
         "a" #'my-agenda-command))
  )
(after! org-agenda
  (setq org-agenda-cmp-user-defined 'my-cmp-agenda))
#+end_src

* lang
** latex
#+BEGIN_SRC elisp
(setq +latex-viewers '(zathura))
#+END_SRC
* tools
* ui
** [[https://github.com/jrblevin/deft][deft]]
If no files match your search string, pressing RET will create a new file using the string as the title. But I am not sure if this will conflict with =org-roam=
#+begin_src elisp
(after! deft
  (setq deft-directory "~/org/"
        deft-extensions '("org","txt")
        deft-recursive t))
#+end_src
** ophints
#+begin_src elisp
(after! evil-goggles
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces))
#+end_src
** treemacs
#+begin_src elisp
(after! treemacs
  (setq treemacs-width 25
        treemacs-show-hidden-files 'nil
        treemacs-hide-gitignored-files-mode 't
        treemacs-user-mode-line-format "" ;; test to fix bug
        ))
#+end_src
** doom-modeline
#+begin_src elisp
(setq doom-modeline-modal nil)
#+end_src
* Research workflow
For getting a bibliography, I use Zotero to get the informations and copy over to =~/arq/bib.bib= using Jabref.
** [[https://github.com/emacs-citar/citar][citar]]
Using emacs builtin reference managent.
#+begin_src elisp
(after! citar
  (setq! citar-bibliography '("~/arq/bib.bib")
         org-cite-global-bibliography '("~/arq/bib.bib")
         citar-notes-paths '("~/org/bib")
         citar-library-paths '("~/arq/files/")
         citar-notes-paths '("~/org/roam/references/")
         )
  (map! :after org-mode
        :map org-mode-map
        :desc "Insert citation" :i "C-a" #'org-cite-insert)
        )
#+end_src

*** [[https://github.com/andras-simonyi/org-cite-csl-activate][andras-simonyi/org-cite-csl-activate]]
#+begin_src elisp :tangle packages.el
(package! oc-csl-activate
  :recipe(:host github :repo "andras-simonyi/org-cite-csl-activate"))
#+end_src

#+begin_src elisp
(after! citar
(require 'oc-csl-activate)
(setq org-cite-activate-processor 'csl-activate))

(add-hook 'org-mode-hook (lambda () (cursor-sensor-mode 1)))
#+end_src
** org-ref (only for labels)
#+begin_src elisp :tangle packages.el
(package! org-ref)
#+end_src
#+begin_src elisp
(use-package! org-ref
  :init (setq org-latex-prefer-user-labels t))
#+end_src
** [[https://www.orgroam.com/manual.html][org-roam]]
#+begin_src elisp
(after! org-roam
  (setq org-roam-directory "~/org/roam"
        org-roam-mode-sections (list #'org-roam-backlinks-section
                                     #'org-roam-reflinks-section
                                     #'org-roam-unlinked-references-section
                                     )
        org-roam-capture-templates  '(("d" "default" plain "%?"
                                       :if-new (file+head "${slug}.org"
                                                          "#+title: ${title}\n#+created: %U\n\n%?")
                                       :unnarrowed t))
        ))
#+end_src
*** org-roam-bibtex
#+begin_src elisp :tangle packages.el
(package! org-roam-bibtex
  :recipe (:host github :repo "org-roam/org-roam-bibtex"))
#+end_src
[cite:@Malaguti2010SurveyVertexColoring]
#+begin_src elisp
(use-package org-roam-bibtex
  :after org-roam
  :config
  (org-roam-bibtex-mode)
  (setq orb-roam-ref-format 'org-cite))

(after! org-roam
  (add-to-list 'org-roam-mode-sections 'orb-section-reference t)
  (add-to-list 'org-roam-mode-sections 'orb-section-absctract t)
  (add-to-list 'org-roam-mode-sections 'orb-section-file t)
  (setq orb-preformat-keywords
        '("citekey" "title" "url" "author-or-editor" "keywords" "file")
        orb-process-file-keyword t
        orb-attached-file-extensions '("pdf"))

  (add-to-list  'org-roam-capture-templates
                '(("r" "bibliography reference" plain
                   (file "~.doom.d/template/org-roam-bibtex-noter.org")
                   :target
                   (file+head "references/${citekey}.org" "#+title: ${title}\n"))))  )
#+end_src
*** org-roam-ui
Seems to drain a lot of battery, so I won't turn it on automatically.
#+begin_src elisp :tangle packages.el
(package! websocket)
(package! org-roam-ui)
#+end_src
#+begin_src elisp :tangle no
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
** org-noter

#+begin_src elisp :tangle packages.el
;; (package! org-noter
;;   :recipe (:host github :repo "dmitrym0/org-noter-plus-djvu"))
(package! org-noter-pdftools
  :recipe (:host github :repo "fuxialexander/org-pdftools"))
(package! org-pdftools
  :recipe (:host github :repo "fuxialexander/org-pdftools"))
#+end_src

#+begin_src elisp
(use-package! org-noter
  :config
  (setq
   org-noter-pdftools-markup-pointer-color "yellow"
   org-noter-notes-search-path '("~/org/notes/")
   ;; org-noter-insert-note-no-questions t
   org-noter-doc-split-fraction '(0.4 . 06)
   org-noter-always-create-frame nil
   org-noter-hide-other nil
   org-noter-pdftools-free-pointer-icon "Note"
   org-noter-pdftools-free-pointer-color "red"
   org-noter-kill-frame-at-session-end nil
   org-noter-auto-save-last-location t
   org-noter-separate-notes-from-heading t
   )
  (map! :map (pdf-view-mode)
        :leader
        (:prefix-map ("n" . "notes")
          :desc "Write notes"                    "w" #'org-noter)
        )
  )
#+end_src
#+begin_src elisp
(use-package! org-pdftools
  :hook (org-load . org-pdftools-setup-link))

(use-package! org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)
    )
  )
#+end_src
*** TODO https://github.com/yuchen-lea/org-media-note

* nano
#+begin_src elisp :tangle packages.el
(package! doom-nano
  :recipe (:host github :repo "ieremies/doom-nano"))
#+end_src
#+begin_src elisp
(require 'doom-nano-ui)
(setq doom-theme 'doom-nano-light) ;; or dark
#+end_src

#+RESULTS:
: doom-nano-light

Outras mudanças que eu fiz.
#+begin_src elisp :results silent
(add-to-list 'load-path "~/bin/nano-emacs/")
(require 'nano-theme-light)
(require 'nano-faces)
(nano-faces)
(require 'nano-theme)
(nano-theme--mode-line)
(require 'nano-modeline)

;; Personal changes
(set-face-attribute 'org-document-title nil
                    :foreground nano-color-salient :weight 'bold)
(set-face-attribute 'org-document-info nil
                    :foreground nano-color-salient)
(set-face-attribute 'org-list-dt nil
                    :foreground nano-color-salient)
(set-face-attribute 'org-level-1 nil
                    :weight 'bold)
;; (set-face-attribute 'flyspell-incorrect nil
;;                     :foreground nano-color-foreground
;;                     :underline `(:style wave :color nano-color-salient))
;; TODO Changed buffer modeline
;; TODO Flyspell incorrect
;; TODO org-link underline
#+end_src

